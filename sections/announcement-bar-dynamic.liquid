<link rel="stylesheet" href="{{ 'announcement-bar-component-slider.css' | asset_url }}">
<link rel="stylesheet" href="{{ 'announcement-bar-dynamic.css' | asset_url }}">

<div class="announcement-bar-dynamic" role="region" aria-label="{{ 'sections.header.announcement' | t }}" {{ section.shopify_attributes }}>
  {% if section.settings.show_popup == true %}
    <modal-opener
      class="announcement-bar-dynamic-popup__opener no-js-hidden"
      data-modal="#PopupModal-{{ section.id }}"
      {{ section.shopify_attributes }}
    >
      <button
        id="ProductPopup-{{ section.id }}"
        class="announcement-bar-popup__button animate-arrow"
        type="button"
        aria-haspopup="dialog"
      >
        {{ section.settings.popup_link_text }}
        {% if section.settings.show_promotions_count %}
          ({{ section.blocks.size }})
        {% endif %}
        {% render 'icon-arrow' %}
      </button>
    </modal-opener>

    <modal-dialog
      id="PopupModal-{{ section.id }}"
      class="announcement-bar-popup-modal"
      {{ section.shopify_attributes }}
    >
      <div
        role="dialog"
        aria-label="{{ section.settings.text_1 }}"
        aria-modal="true"
        class="announcement-bar-popup-modal__content"
        tabindex="-1"
      >
        <button
          id="ModalClose-{{ section.id }}"
          type="button"
          class="announcement-bar-popup-modal__toggle sizing-guide__close"
          aria-label="{{ 'accessibility.close' | t }}"
        >
          {% render 'icon-close' %}
        </button>
        {% if section.settings.popup_heading != blank %}
          <div class="announcement-bar-popup__heading">{{ section.settings.popup_heading }}</div>
        {% endif %}
    
        {%- for block in section.blocks -%}
          {%- case block.type -%}
            {%- when 'announcement' -%}
              <div class="promo">
                {% if block.settings.popup_promo_title != blank %}
                  <div class="promo__title">
                    {{ block.settings.popup_promo_title }}
                    {% if block.settings.show_countdown == true and block.settings.countdown_date != blank and block.settings.countdown_time != blank %} 
                      <countdown-timer 
                        class="announcement-bar-dynamic__timer" 
                        {% if block.settings.countdown_date != blank %}
                          data-timer-end-date="{{ block.settings.countdown_date }}"
                        {% endif %}
                        {% if block.settings.countdown_time != blank %}
                          data-timer-end-time="{{ block.settings.countdown_time }}"
                        {% endif %}
                      >
                        {% if block.settings.show_days == true -%}<span data-timer="days">00</span><span class="timer__units">d :</span>{%- endif -%}
                        <span data-timer="hours" class="timer__numbers">00</span><span class="timer__units">h :</span>
                        <span data-timer="minutes" class="timer__numbers">00</span><span class="timer__units">m :</span>
                        <span data-timer="seconds" class="timer__numbers">00</span><span class="timer__units">s</span> 
                      </countdown-timer>
                    {% endif %}
                  </div>
                {% endif %}
        
                {% if block.settings.popup_promo_description != blank %}
                  <div class="promo__description">{{ block.settings.popup_promo_description }}</div>
                {% endif %}
                {% if block.settings.popup_promo_link != blank %}
                  {{ block.settings.popup_promo_link_text | link_to: block.settings.popup_promo_link, class: 'btn' }}
                {% endif %}
              </div>
            {%- when 'ship_scout' -%}
              {%- liquid 
                assign is_ship_scout_test_running = false
                if localization.country.iso_code == 'US'
                  assign is_ship_scout_test_running = true
                endif 

                assign full_title = block.settings.popup_promo_title_default
                assign full_description = block.settings.popup_promo_description_default

                if block.settings.popup_promo_title != blank and is_ship_scout_test_running
                  assign full_title = block.settings.popup_promo_title | split: '<$>'
                endif
                if block.settings.popup_promo_description != blank and is_ship_scout_test_running
                  assign description = block.settings.popup_promo_description | split: '<$>'
                  assign full_description = description[0] | append: '<span data-ship-scout-amount></span>' | append: description[1]
                endif
                -%}
              <div class="promo">
                {% if full_title != blank %}
                  <div class="promo__title">
                    {{ full_title }}
                    {% if block.settings.show_countdown == true and block.settings.countdown_date != blank and block.settings.countdown_time != blank %} 
                      <countdown-timer 
                        class="announcement-bar-dynamic__timer" 
                        {% if block.settings.countdown_date != blank %}
                          data-timer-end-date="{{ block.settings.countdown_date }}"
                        {% endif %}
                        {% if block.settings.countdown_time != blank %}
                          data-timer-end-time="{{ block.settings.countdown_time }}"
                        {% endif %}
                      >
                        {% if block.settings.show_days == true -%}<span data-timer="days">00</span><span class="timer__units">d :</span>{%- endif -%}
                        <span data-timer="hours" class="timer__numbers">00</span><span class="timer__units">h :</span>
                        <span data-timer="minutes" class="timer__numbers">00</span><span class="timer__units">m :</span>
                        <span data-timer="seconds" class="timer__numbers">00</span><span class="timer__units">s</span> 
                      </countdown-timer>
                    {% endif %}
                  </div>
                {% endif %}

                {% if full_description != blank %}
                  <div class="promo__description">{{ full_description }}</div>
                {% endif %}

                {% if block.settings.popup_promo_link != blank %}
                  <div>{{ block.settings.popup_promo_link_text | link_to: block.settings.popup_promo_link }}</div>
                {% endif %}
              </div>
          {%- endcase -%}
        {%- endfor -%}
    
      </div>
    </modal-dialog>
  {% endif %}

  <slideshow-component
    class="slider-mobile-gutter"
    role="region"
    aria-roledescription="{{ 'sections.slideshow.carousel' | t }}"
    aria-label="{{ section.settings.accessibility_info | escape }}"
  >
    <button
      type="button"
      class="slider-button slider-button--prev"
      name="previous"
      aria-label="{{ 'sections.slideshow.previous_slideshow' | t }}"
      aria-controls="Slider-{{ section.id }}"
    >
      {% render 'icon-caret' %}
    </button>
    <div
      class="slideshow grid grid--1-col slider slider--everywhere"
      id="Slider-{{ section.id }}"
      aria-live="polite"
      aria-atomic="true"
      data-autoplay="{{ section.settings.auto_rotate }}"
      data-speed="{{ section.settings.change_slides_speed }}"
    >
      {%- for block in section.blocks -%}
        {%- case block.type -%}
          {%- when 'announcement' -%}
            {%- if block.settings.announcement_bar_text != blank -%}
              <div
                class="slideshow__slide grid__item grid--1-col slider__slide"
                id="Slide-{{ section.id }}-{{ forloop.index }}"
                {{ block.shopify_attributes }}
                role="group"
                aria-roledescription="{{ 'sections.slideshow.slide' | t }}"
                aria-label="{{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length}}"
                tabindex="-1"
              >
                {%- if block.settings.announcement_bar_link != blank -%}
                  <a href="{{ block.settings.announcement_bar_link }}" class="announcement-bar-dynamic__link">
                {%- endif -%}
                  <div class="announcement-bar-dynamic__message">
                    {{ block.settings.announcement_bar_text | escape }}
                  </div>  
                {%- if block.settings.announcement_bar_link != blank -%}
                  </a>
                {%- endif -%}

                {% if block.settings.show_countdown == true and block.settings.countdown_date != blank and block.settings.countdown_time != blank %} 
                    <countdown-timer 
                      class="announcement-bar-dynamic__timer" 
                      {% if block.settings.countdown_date != blank %}
                        data-timer-end-date="{{ block.settings.countdown_date }}"
                      {% endif %}
                      {% if block.settings.countdown_time != blank %}
                        data-timer-end-time="{{ block.settings.countdown_time }}"
                      {% endif %}
                    >
                      {% if block.settings.show_days == true -%}<span data-timer="days">00</span><span class="timer__units">d :</span>{%- endif -%}
                      <span data-timer="hours" class="timer__numbers">00</span><span class="timer__units">h :</span>
                      <span data-timer="minutes" class="timer__numbers">00</span><span class="timer__units">m :</span>
                      <span data-timer="seconds" class="timer__numbers">00</span><span class="timer__units">s</span> 
                    </countdown-timer>
                {% endif %}
              </div>
            {%- endif -%}
          {%- when 'ship_scout' -%}
            {%- liquid 
              assign is_ship_scout_test_running = false
              if localization.country.iso_code == 'US'
                assign is_ship_scout_test_running = true
              endif 

              assign full_announcement_bar_text = block.settings.announcement_bar_text_default 

              if block.settings.announcement_bar_text != blank and is_ship_scout_test_running
                assign announcement_bar_text = block.settings.announcement_bar_text | split: '<$>'
                assign full_announcement_bar_text = announcement_bar_text[0] | append: '<span data-ship-scout-amount></span>' | append: announcement_bar_text[1]
              endif
              -%}
              {%- if full_announcement_bar_text != blank -%}
                <div
                  class="slideshow__slide grid__item grid--1-col slider__slide"
                  id="Slide-{{ section.id }}-{{ forloop.index }}"
                  {{ block.shopify_attributes }}
                  role="group"
                  aria-roledescription="{{ 'sections.slideshow.slide' | t }}"
                  aria-label="{{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length}}"
                  tabindex="-1"
                  {% if is_ship_scout_test_running -%}
                    data-ship-scout-announcement
                  {%- endif -%}
                >
                  {%- if block.settings.announcement_bar_link != blank -%}
                    <a href="{{ block.settings.announcement_bar_link }}" class="announcement-bar-dynamic__link">
                  {%- endif -%}
                    <div class="announcement-bar-dynamic__message">
                      {{ full_announcement_bar_text }}
                    </div>  
                  {%- if block.settings.announcement_bar_link != blank -%}
                    </a>
                  {%- endif -%}
  
                  {% if block.settings.show_countdown == true and block.settings.countdown_date != blank and block.settings.countdown_time != blank %} 
                      <countdown-timer 
                        class="announcement-bar-dynamic__timer" 
                        {% if block.settings.countdown_date != blank %}
                          data-timer-end-date="{{ block.settings.countdown_date }}"
                        {% endif %}
                        {% if block.settings.countdown_time != blank %}
                          data-timer-end-time="{{ block.settings.countdown_time }}"
                        {% endif %}
                      >
                        {% if block.settings.show_days == true -%}<span data-timer="days">00</span><span class="timer__units">d :</span>{%- endif -%}
                        <span data-timer="hours" class="timer__numbers">00</span><span class="timer__units">h :</span>
                        <span data-timer="minutes" class="timer__numbers">00</span><span class="timer__units">m :</span>
                        <span data-timer="seconds" class="timer__numbers">00</span><span class="timer__units">s</span> 
                      </countdown-timer>
                  {% endif %}
                </div>
              {%- endif -%}
        {%- endcase -%}
      {%- endfor -%}
    </div>
    <button
      type="button"
      class="slider-button slider-button--next"
      name="next"
      aria-label="{{ 'sections.slideshow.next_slideshow' | t }}"
      aria-controls="Slider-{{ section.id }}"
    >
      {% render 'icon-caret' %}
    </button>
  
    {%- if section.blocks.size > 1 -%}
      <div class="slideshow__controls slider-buttons no-js-hidden">
        <div 
          class="slider-counter slider-counter--counter caption"
          style="display:none;"
        >
          <span class="slider-counter--current">1</span>
          <span aria-hidden="true"> / </span>
          <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
          <span class="slider-counter--total">{{ section.blocks.size }}</span>
        </div>
  
        {%- if section.settings.auto_rotate -%}
          <button
            type="button"
            style="display:none;"
            class="slideshow__autoplay slider-button no-js-hidden{% if section.settings.auto_rotate == false %} slideshow__autoplay--paused{% endif %}"
            aria-label="{{ 'sections.slideshow.pause_slideshow' | t }}"
          >
            {%- render 'icon-pause' -%}
            {%- render 'icon-play' -%}
          </button>
        {%- endif -%}
      </div>
  
      <noscript>
        <div class="slider-buttons">
          <div class="slider-counter">
            {%- for block in section.blocks -%}
              <a
                href="#Slide-{{ section.id }}-{{ forloop.index }}"
                class="slider-counter__link link"
                aria-label="{{ 'sections.slideshow.load_slide' | t }} {{ forloop.index }} {{ 'general.slider.of' | t }} {{ forloop.length}}"
              >
                {{ forloop.index }}
              </a>
            {%- endfor -%}
          </div>
        </div>
      </noscript>
    {%- endif -%}
  </slideshow-component>
</div>

{% style %}
  #shopify-section-{{ section.id }} {
    --announcement-bar-dynamic-text-color: {{ section.settings.color }};

    background-color: {{ section.settings.background_color }};
    color: {{ section.settings.color }};
  }

  .announcement-bar-popup-modal {
    --announcement-bar-dynamic-popup-color: {{ section.settings.popup_color }};;
    --announcement-bar-dynamic-popup-background: {{ section.settings.popup_background_color }};
  }
{% endstyle %}

<script>
  class SliderComponent extends HTMLElement {
    constructor() {
      super();
      this.slider = this.querySelector('[id^="Slider-"]');
      this.sliderItems = this.querySelectorAll('[id^="Slide-"]');
      this.enableSliderLooping = false;
      this.currentPageElement = this.querySelector(".slider-counter--current");
      this.pageTotalElement = this.querySelector(".slider-counter--total");
      this.prevButton = this.querySelector('button[name="previous"]');
      this.nextButton = this.querySelector('button[name="next"]');
  
      if (!this.slider || !this.nextButton) return;
  
      this.initPages();
      const resizeObserver = new ResizeObserver((entries) => this.initPages());
      resizeObserver.observe(this.slider);
  
      this.slider.addEventListener("scroll", this.update.bind(this));
      this.prevButton.addEventListener("click", this.onButtonClick.bind(this));
      this.nextButton.addEventListener("click", this.onButtonClick.bind(this));
    }
  
    initPages() {
      this.sliderItemsToShow = Array.from(this.sliderItems).filter(
        (element) => element.clientWidth > 0
      );
      this.sliderLastItem =
        this.sliderItemsToShow[this.sliderItemsToShow.length - 1];
      if (this.sliderItemsToShow.length === 0) return;
      this.slidesPerPage = Math.floor(
        this.slider.clientWidth / this.sliderItemsToShow[0].clientWidth
      );
      this.totalPages = this.sliderItemsToShow.length - this.slidesPerPage + 1;
      this.update();
    }
  
    resetPages() {
      this.sliderItems = this.querySelectorAll('[id^="Slide-"]');
      this.initPages();
    }
  
    update() {
      const previousPage = this.currentPage;
      this.currentPage =
        Math.round(this.slider.scrollLeft / this.sliderLastItem.clientWidth) + 1;
  
      if (this.currentPageElement && this.pageTotalElement) {
        this.currentPageElement.textContent = this.currentPage;
        this.pageTotalElement.textContent = this.totalPages;
      }
  
      if (this.currentPage != previousPage) {
        this.dispatchEvent(
          new CustomEvent("slideChanged", {
            detail: {
              currentPage: this.currentPage,
              currentElement: this.sliderItemsToShow[this.currentPage - 1],
            },
          })
        );
      }
  
      if (this.enableSliderLooping) return;
  
      if (this.isSlideVisible(this.sliderItemsToShow[0])) {
        this.prevButton.setAttribute("disabled", "disabled");
      } else {
        this.prevButton.removeAttribute("disabled");
      }
  
      if (this.isSlideVisible(this.sliderLastItem)) {
        this.nextButton.setAttribute("disabled", "disabled");
      } else {
        this.nextButton.removeAttribute("disabled");
      }
    }
  
    isSlideVisible(element, offset = 0) {
      const lastVisibleSlide =
        this.slider.clientWidth + this.slider.scrollLeft - offset;
      return (
        element.offsetLeft + element.clientWidth <= lastVisibleSlide &&
        element.offsetLeft >= this.slider.scrollLeft
      );
    }
  
    onButtonClick(event) {
      event.preventDefault();
      const step = event.currentTarget.dataset.step || 1;
      this.slideScrollPosition =
        event.currentTarget.name === "next"
          ? this.slider.scrollLeft + step * this.sliderLastItem.clientWidth
          : this.slider.scrollLeft - step * this.sliderLastItem.clientWidth;
      this.slider.scrollTo({
        left: this.slideScrollPosition,
      });
    }
  }
  
  customElements.define("slider-component", SliderComponent);

  class SlideshowComponent extends SliderComponent {
    constructor() {
      super();
      this.sliderControlWrapper = this.querySelector(".slider-buttons");
      this.enableSliderLooping = true;
  
      if (!this.sliderControlWrapper) return;
  
      this.sliderFirstItemNode = this.slider.querySelector(".slideshow__slide");
      if (this.sliderItemsToShow.length > 0) this.currentPage = 1;
  
      this.sliderControlLinksArray = Array.from(
        this.sliderControlWrapper.querySelectorAll(".slider-counter__link")
      );
      this.sliderControlLinksArray.forEach((link) =>
        link.addEventListener("click", this.linkToSlide.bind(this))
      );
      this.slider.addEventListener("scroll", this.setSlideVisibility.bind(this));
      this.setSlideVisibility();
  
      if (this.slider.getAttribute("data-autoplay") === "true")
        this.setAutoPlay();
    }
  
    setAutoPlay() {
      this.sliderAutoplayButton = this.querySelector(".slideshow__autoplay");
      this.autoplaySpeed = this.slider.dataset.speed * 1000;
  
      this.sliderAutoplayButton.addEventListener(
        "click",
        this.autoPlayToggle.bind(this)
      );
      this.addEventListener("mouseover", this.focusInHandling.bind(this));
      this.addEventListener("mouseleave", this.focusOutHandling.bind(this));
      this.addEventListener("focusin", this.focusInHandling.bind(this));
      this.addEventListener("focusout", this.focusOutHandling.bind(this));
  
      this.play();
      this.autoplayButtonIsSetToPlay = true;
    }
  
    onButtonClick(event) {
      super.onButtonClick(event);
      const isFirstSlide = this.currentPage === 1;
      const isLastSlide = this.currentPage === this.sliderItemsToShow.length;
  
      if (!isFirstSlide && !isLastSlide) return;
  
      if (isFirstSlide && event.currentTarget.name === "previous") {
        this.slideScrollPosition =
          this.slider.scrollLeft +
          this.sliderFirstItemNode.clientWidth * this.sliderItemsToShow.length;
      } else if (isLastSlide && event.currentTarget.name === "next") {
        this.slideScrollPosition = 0;
      }
      this.slider.scrollTo({
        left: this.slideScrollPosition,
      });
    }
  
    update() {
      super.update();
      this.sliderControlButtons = this.querySelectorAll(".slider-counter__link");
      this.prevButton.removeAttribute("disabled");
  
      if (!this.sliderControlButtons.length) return;
  
      this.sliderControlButtons.forEach((link) => {
        link.classList.remove("slider-counter__link--active");
        link.removeAttribute("aria-current");
      });
      this.sliderControlButtons[this.currentPage - 1].classList.add(
        "slider-counter__link--active"
      );
      this.sliderControlButtons[this.currentPage - 1].setAttribute(
        "aria-current",
        true
      );
    }
  
    autoPlayToggle() {
      this.togglePlayButtonState(this.autoplayButtonIsSetToPlay);
      this.autoplayButtonIsSetToPlay ? this.pause() : this.play();
      this.autoplayButtonIsSetToPlay = !this.autoplayButtonIsSetToPlay;
    }
  
    focusOutHandling(event) {
      const focusedOnAutoplayButton =
        event.target === this.sliderAutoplayButton ||
        this.sliderAutoplayButton.contains(event.target);
      if (!this.autoplayButtonIsSetToPlay || focusedOnAutoplayButton) return;
      this.play();
    }
  
    focusInHandling(event) {
      const focusedOnAutoplayButton =
        event.target === this.sliderAutoplayButton ||
        this.sliderAutoplayButton.contains(event.target);
      if (focusedOnAutoplayButton && this.autoplayButtonIsSetToPlay) {
        this.play();
      } else if (this.autoplayButtonIsSetToPlay) {
        this.pause();
      }
    }
  
    play() {
      this.slider.setAttribute("aria-live", "off");
      clearInterval(this.autoplay);
      this.autoplay = setInterval(
        this.autoRotateSlides.bind(this),
        this.autoplaySpeed
      );
    }
  
    pause() {
      this.slider.setAttribute("aria-live", "polite");
      clearInterval(this.autoplay);
    }
  
    togglePlayButtonState(pauseAutoplay) {
      if (pauseAutoplay) {
        this.sliderAutoplayButton.classList.add("slideshow__autoplay--paused");
        this.sliderAutoplayButton.setAttribute(
          "aria-label",
          window.accessibilityStrings.playSlideshow
        );
      } else {
        this.sliderAutoplayButton.classList.remove("slideshow__autoplay--paused");
        this.sliderAutoplayButton.setAttribute(
          "aria-label",
          window.accessibilityStrings.pauseSlideshow
        );
      }
    }
  
    autoRotateSlides() {
      const slideScrollPosition =
        this.currentPage === this.sliderItems.length
          ? 0
          : this.slider.scrollLeft +
            this.slider.querySelector(".slideshow__slide").clientWidth;
      this.slider.scrollTo({
        left: slideScrollPosition,
      });
    }
  
    setSlideVisibility() {
      this.sliderItemsToShow.forEach((item, index) => {
        const button = item.querySelector("a");
        if (index === this.currentPage - 1) {
          if (button) button.removeAttribute("tabindex");
          item.setAttribute("aria-hidden", "false");
          item.removeAttribute("tabindex");
        } else {
          if (button) button.setAttribute("tabindex", "-1");
          item.setAttribute("aria-hidden", "true");
          item.setAttribute("tabindex", "-1");
        }
      });
    }
  
    linkToSlide(event) {
      event.preventDefault();
      const slideScrollPosition =
        this.slider.scrollLeft +
        this.sliderFirstItemNode.clientWidth *
          (this.sliderControlLinksArray.indexOf(event.currentTarget) +
            1 -
            this.currentPage);
      this.slider.scrollTo({
        left: slideScrollPosition,
      });
    }
  }
  
  customElements.define("slideshow-component", SlideshowComponent);

  class ModalDialog extends HTMLElement {
    constructor() {
      super();
      this.querySelector('[id^="ModalClose-"]').addEventListener(
        "click",
        this.hide.bind(this)
      );
      this.addEventListener("keyup", (event) => {
        if (event.code.toUpperCase() === "ESCAPE") this.hide();
      });
      if (this.classList.contains("media-modal")) {
        this.addEventListener("pointerup", (event) => {
          if (
            event.pointerType === "mouse" &&
            !event.target.closest("deferred-media, product-model")
          )
            this.hide();
        });
      } else {
        this.addEventListener("click", (event) => {
          if (event.target.nodeName === "MODAL-DIALOG") this.hide();
        });
      }
    }
  
    show(opener) {
      this.openedBy = opener;
      const popup = this.querySelector(".template-popup");
      document.body.classList.add("overflow-hidden");
      this.setAttribute("open", "");
      if (popup) popup.loadContent();
      trapFocus(this, this.querySelector('[role="dialog"]'));
      window.pauseAllMedia();
    }
  
    hide() {
      document.body.classList.remove("overflow-hidden");
      this.removeAttribute("open");
      removeTrapFocus(this.openedBy);
      window.pauseAllMedia();
    }
  }
  customElements.define("modal-dialog", ModalDialog);

  class ModalOpener extends HTMLElement {
    constructor() {
      super();
  
      const button = this.querySelector("button");
  
      if (!button) return;
      button.addEventListener("click", () => {
        const modal = document.querySelector(this.getAttribute("data-modal"));
        if (modal) modal.show(button);
      });
    }
  }
  customElements.define("modal-opener", ModalOpener);

  class CountdownTimer extends HTMLElement {
    constructor() {
      super();
      this.daysContainer = this.querySelector('[data-timer="days"]');
      this.hoursContainer = this.querySelector('[data-timer="hours"]');
      this.minutesContainer = this.querySelector('[data-timer="minutes"]');
      this.secondsContainer = this.querySelector('[data-timer="seconds"]');
  
      this.endDate = this.dataset.timerEndDate;
      this.endTime = this.dataset.timerEndTime;
      this.endDateAndTime = Date.parse(`${this.endDate} ${this.endTime}-04:00`);
  
      this.countdown = setInterval(this.updateTimer.bind(this), 1000);
    }
  
    updateTimer() {
      this.now = new Date().getTime();
      this.diff = this.endDateAndTime - this.now;
  
      this.days = Math.floor(this.diff / (1000 * 60 * 60 * 24));
      this.hours = Math.floor(this.diff / (1000 * 60 * 60));
      this.mins = Math.floor(this.diff / (1000 * 60));
      this.secs = Math.floor(this.diff / 1000);
  
      this.updateView();
  
      if (this.diff < 0) {
        clearInterval(this.countdown);
        this.style.display = "none";
        // location.reload();
      }
    }
  
    updateView() {
      if (this.daysContainer != null) {
        this.daysContainer.innerText = this.days;
      }
  
      if (this.hoursContainer != null) {
        this.hoursContainer.innerText = String(
          this.hours - this.days * 24
        ).padStart(2, "0");
      }
  
      if (this.minutesContainer != null) {
        this.minutesContainer.innerText = String(
          this.mins - this.hours * 60
        ).padStart(2, "0");
      }
  
      if (this.secondsContainer != null) {
        this.secondsContainer.innerText = String(
          this.secs - this.mins * 60
        ).padStart(2, "0");
      }
    }
  }
  
  customElements.define("countdown-timer", CountdownTimer);
</script>

{% schema %}
{
  "name": "t:sections.announcement-bar-dynamic.name",
  "max_blocks": 12,
  "settings": [
    {
      "type": "header", 
      "content": "Announcentment Bar" 
    },
    {
      "type": "color", 
      "id": "background_color", 
      "label": "t:sections.announcement-bar-dynamic.settings.background_color.label",
      "default": "#000000"
    },
    {
      "type": "color", 
      "id": "color", 
      "label": "t:sections.announcement-bar-dynamic.settings.color.label",
      "default": "#ffffff"
    },
    {
      "type": "text", 
      "id": "popup_link_text", 
      "label": "t:sections.announcement-bar-dynamic.settings.popup_link_text.label",
      "default": "View all offers"
    },
    {
      "type": "checkbox", 
      "id": "show_promotions_count",
      "label": "t:sections.announcement-bar-dynamic.settings.show_promotions_count.label", 
      "default": true
    },
    {
      "type": "checkbox",
      "id": "auto_rotate",
      "label": "t:sections.slideshow.settings.auto_rotate.label",
      "default": true
    },    
    {
      "type": "range",
      "id": "change_slides_speed",
      "min": 3,
      "max": 9,
      "step": 2,
      "unit": "s",
      "label": "t:sections.slideshow.settings.change_slides_speed.label",
      "default": 5
    },
    {
      "type": "header", 
      "content": "Popup" 
    },
    {
      "type": "checkbox", 
      "id": "show_popup", 
      "label": "Show popup", 
      "default": true
    },
    {
      "type": "text",
      "id": "popup_heading",
      "label": "t:sections.announcement-bar-dynamic.settings.popup_heading.label"
    },
    {
      "type": "color", 
      "id": "popup_background_color", 
      "label": "t:sections.announcement-bar-dynamic.settings.popup_background_color.label",
      "default": "#000000"
    },
    {
      "type": "color", 
      "id": "popup_color", 
      "label": "t:sections.announcement-bar-dynamic.settings.popup_color.label",
      "default": "#ffffff"
    }
  ],
  "blocks": [
    {
      "type": "announcement",
      "name": "t:sections.announcement-bar-dynamic.blocks.announcement.name",
      "settings": [
        {
          "type": "header", 
          "content": "Announcement Bar"
        },
        {
          "type": "text",
          "id": "announcement_bar_text",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.announcement_bar_text.label"
        },
        {
          "type": "url",
          "id": "announcement_bar_link",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.announcement_bar_link.label"
        },
        {
          "type": "header", 
          "content": "Countdown"
        },
        {
          "type": "checkbox", 
          "id": "show_countdown", 
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.show_countdown.label",
          "default": false
        },
        {
          "type": "text",
          "id": "countdown_date",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_date.label",
          "info": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_date.info"
        },
        {
          "type": "text",
          "id": "countdown_time",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_time.label",
          "info": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_time.info",
          "default": "00:00:00"
        },
        {
          "type": "checkbox", 
          "id": "show_days", 
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.show_days.label",
          "default": false
        },
        {
          "type": "header", 
          "content": "Popup"
        },
        {
          "type": "text",
          "id": "popup_promo_title",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_title.label"
        },
        {
          "type": "textarea",
          "id": "popup_promo_description",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_description.label"
        },
        {
          "type": "text",
          "id": "popup_promo_link_text",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_link_text.label"
        },
        {
          "type": "url",
          "id": "popup_promo_link",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_link.label"
        }
      ]
    },
    {
      "type": "ship_scout",
      "name": "Ship Scout",
      "settings": [
        {
          "type": "header", 
          "content": "Announcement Bar"
        },
        {
          "type": "text",
          "id": "announcement_bar_text_default",
          "label": "Text Default",
          "info": "Will show when not in Ship Scout locale"
        },
        {
          "type": "text",
          "id": "announcement_bar_text",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.announcement_bar_text.label",
          "info": "Use <$> to as a placeholder for Ship Scout treshold amount"
        },
        {
          "type": "url",
          "id": "announcement_bar_link",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.announcement_bar_link.label"
        },
        {
          "type": "header", 
          "content": "Countdown"
        },
        {
          "type": "checkbox", 
          "id": "show_countdown", 
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.show_countdown.label",
          "default": false
        },
        {
          "type": "text",
          "id": "countdown_date",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_date.label",
          "info": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_date.info"
        },
        {
          "type": "text",
          "id": "countdown_time",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_time.label",
          "info": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.countdown_time.info",
          "default": "00:00:00"
        },
        {
          "type": "checkbox", 
          "id": "show_days", 
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.show_days.label",
          "default": false
        },
        {
          "type": "header", 
          "content": "Popup"
        },
        {
          "type": "text",
          "id": "popup_promo_title_default",
          "label": "Title Default",
          "info": "Will show when not in Ship Scout locale"
        },
        {
          "type": "text",
          "id": "popup_promo_title",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_title.label"
        },
        {
          "type": "textarea",
          "id": "popup_promo_description_default",
          "label": "Description Default",
          "info": "Will show when not in Ship Scout locale"
        },
        {
          "type": "textarea",
          "id": "popup_promo_description",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_description.label",
          "info": "Use <$> to as a placeholder for Ship Scout treshold amount"
        },
        {
          "type": "text",
          "id": "popup_promo_link_text",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_link_text.label"
        },
        {
          "type": "url",
          "id": "popup_promo_link",
          "label": "t:sections.announcement-bar-dynamic.blocks.announcement.settings.popup_promo_link.label"
        }
      ]
    }
  ],
  "default": {
    "blocks": [
      {
        "type": "announcement"
      }
    ]
  }
}
{% endschema %}
